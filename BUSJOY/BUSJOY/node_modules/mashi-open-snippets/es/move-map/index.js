import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable */
Component({
  data: {
    markerWidth: 10,
    // marker 宽
    markerHeight: 10,
    // marker 高
    bottomCardShow: false,
    // 底部card是否显示
    markers: [],
    // markers
    selectMarkers: [],
    // 筛选后的markers
    searchTypeData: [{
      id: 0,
      isCheck: 1,
      type: '步行'
    }, {
      id: 1,
      type: '骑行'
    }, {
      id: 2,
      type: '驾车'
    }, {
      id: 3,
      type: '公交'
    }],
    showSearchTypeTab: false,
    scale: 15,
    // 缩放比例（和includePoints二选一）
    cardData: {},
    // card数据（景点）
    bgchange: true,
    // 锁定位置样式控制
    routeShow: [],
    // 所有的路线
    chooseData: {},
    //  选择的路线
    showRouteBox: false,
    // 路线框等的变化
    polyline: [],
    // 连线（景点）
    boxHeight: my.getSystemInfoSync().windowHeight,
    // 获取手机窗口高度
    boxHeightChange: false,
    // 线路浮层高度
    MenuShow: true,
    // 菜单
    version: '1.0.0' // 组件版本信息

  },
  props: {
    mockLocation: false,
    // 是否mock当前位置
    routeColor: '',
    // 导航路线颜色 10.1.50之后，该值仅在2d地图中生效
    className: '',
    // 父级加入className
    iconWidth: null,
    // 导航纹理宽度 iconPath设置时才生效。10.1.50建议不再设置，在3d地图下提供了默认的纹理宽度。
    iconPath: '',
    // 导航路线纹理 3d地图其优先级高于routeColor，即纹理会覆盖颜色值；10.1.50建议不再设置，在3d地图下提供了默认的纹理图案。
    routeWidth: null,
    // 路线宽度  在不设置纹理时有效。 10.1.50建议不再设置，在2d地图下提供了默认值，3d不需要设置。。
    longitude: '',
    // 中心位置
    latitude: '',
    // 中心位置
    polylineColor: '',
    // 路线颜色及透明度
    polylineWidth: null,
    // 路线宽度
    polylineDottedLine: null,
    // 路线虚线还是实线
    city: '',
    destinationCity: '',
    anchorY: null,
    // markersY轴的位置
    anchorX: null,
    // markersX轴的位置
    circles: []
  },
  didMount: function didMount() {
    this.mapCtx = my.createMapContext('map');
    this.getAttractions(); // 获取所有景点并以markers形式展示

    this.inspectionVersion(); // 检测支付宝版本

    console.log("\u8F7D\u5165\u666F\u533A\u5BFC\u89C8\u7EC4\u4EF6:" + this.data.version);
  },
  didUpdate: function didUpdate() {// this.getMindis(this.props.data); //  计算距离
  },
  methods: {
    /**
     * 支付宝版本检测
     * @method inspectionVersion
     */
    inspectionVersion: function inspectionVersion() {
      try {
        var data = this.props.data;
        var version = my.getSystemInfoSync().version.substring(0, 7); // 获取版本

        version = parseInt(version.replace(/\./g, ''));

        if (version >= 10150) {
          this.setData({
            routeShow: data
          }); // 路线功能
        } else {
          my.alert({
            title: '提示',
            content: '你好，您的版本过低，继续使用将有些功能不能正常使用，请将支付宝升级到10.1.50及以上。'
          });
        }
      } catch (ex) {
        console.log(ex);
      }
    },

    /**
     * 获取所有景点
     * @method getAttractions
     */
    getAttractions: function getAttractions() {
      var markers = this.props.markers;
      var _this$data = this.data,
          markerWidth = _this$data.markerWidth,
          markerHeight = _this$data.markerHeight; // let newMarkers = [];

      if (markers) {
        var newMarkers = markers.map(function (item, i) {
          item.id = i + 1; // markers 不能为0

          item.width = markerWidth;
          item.height = markerHeight;
          item.anchorX = 0.5;
          item.anchorY = 0;
          item.markerLevel = 1;
          item.iconPath = 'https://gw.alipayobjects.com/mdn/rms_cd276b/afts/img/A*PZpiRrolAVoAAAAAAAAAAABkARQnAQ';
          return item;
        });
        this.setData({
          markers: newMarkers
        });
      }
    },

    /**
     * marker点击事件
     * @method markertap
     * @param {*} e
     */
    markertap: function markertap(e) {
      console.log(e);
      this.mapCtx.clearRoute(); // 清除导航线

      var data = this.props.data;
      this.setData({
        showSearchTypeTab: false // showRouteBox: false,
        // boxHeightChange: false,
        // cardData: {},
        // chooseData: [],
        // routeShow: [],
        // MenuShow: false

      });
      var markers = this.data.markers;
      var cardData = markers[e.markerId - 1];
      this.setData({
        cardData: cardData,
        bottomCardShow: true
      });
    },

    /**
     * 点击左边菜单筛选
     * @method onTypeClick
     * @param {*} type
     */
    onTypeClick: function onTypeClick(type) {
      this.mapCtx.clearRoute();
      var value = type.value;
      var markers = this.data.markers;
      var selectMarkers = [];
      markers.map(function (item) {
        if (item.type && item.type.value === value) {
          selectMarkers.push(_extends({}, item, {
            iconAppendStr: null,
            anchorX: 0.5,
            anchorY: 0.5,
            width: 30,
            height: 35,
            iconPath: 'https://gw.alipayobjects.com/mdn/rms_7a3c08/afts/img/A*4QW9RY1ONwkAAAAAAAAAAABkARQnAQ'
          }));
        }
      });
      this.setData({
        selectMarkers: selectMarkers,
        scale: this.data.scale
      });
    },

    /**
     * 点击左边菜单筛选取消
     * @method onCancelType
     */
    onCancelType: function onCancelType() {
      this.mapCtx.clearRoute();
      this.setData({
        selectMarkers: [],
        bottomCardShow: false,
        scale: this.data.scale
      });
    },

    /**
     * 导航立即前往
     * @method onNavigation
     */
    onNavigation: function onNavigation(value) {
      var _this = this;

      // 点击浮层导航 点击step导航 （导航，显示路线）
      this.mapCtx.clearRoute();
      var that = this;
      var cardData = this.data.cardData;
      var mockLocation = this.props.mockLocation;
      var data = {
        searchType: 'walk',
        startLat: this.props.latitude,
        startLng: this.props.longitude,
        endLat: cardData.latitude,
        endLng: cardData.longitude
      };

      if (mockLocation) {
        this.navigation(data);
      } else {
        my.getLocation({
          success: function success(res) {
            var searchTypeData = that.data.searchTypeData;
            data.startLat = res.latitude;
            data.startLng = res.longitude;

            for (var i = 0; i < searchTypeData.length; i++) {
              if (searchTypeData[i].isCheck === 1) {
                switch (searchTypeData[i].type) {
                  case '步行':
                    data.searchType = 'walk';
                    break;

                  case '骑行':
                    data.searchType = 'ride';
                    break;

                  case '驾车':
                    data.searchType = 'drive';
                    break;

                  case '公交':
                    data.searchType = 'bus';
                    break;
                }
              }
            }

            _this.navigation(data);
          },
          fail: function fail(err) {
            console.log(err);
          }
        });
      }
    },

    /**
     * 显示导航线路
     * @method navigation
     */
    navigation: function navigation(data) {
      var _this2 = this;

      // 导航（步行，骑车，驾车，公交）
      var _this$props = this.props,
          routeColor = _this$props.routeColor,
          iconWidth = _this$props.iconWidth,
          routeWidth = _this$props.routeWidth,
          iconPath = _this$props.iconPath,
          city = _this$props.city,
          destinationCity = _this$props.destinationCity;
      this.mapCtx.showRoute(_extends({}, data, {
        routeColor: routeColor,
        iconPath: iconPath,
        iconWidth: iconWidth,
        routeWidth: routeWidth,
        zIndex: 4,
        mode: 0,
        // 只有驾车模式和公交模式支持，可选
        city: city,
        // 公交模式下必填
        destinationCity: destinationCity,
        // 公交跨城模式下必填
        success: function success(res) {
          if (res.success === false) {
            my.alert({
              title: '亲',
              content: '距离太远，请切换导航方式',
              buttonText: '我知道了',
              success: function success() {
                my.alert({
                  title: '用户点击了「我知道了」'
                });
              }
            });
          } else {
            // 显示导航
            !_this2.props.mockLocation && _this2.setData({
              showSearchTypeTab: true
            });
          }
        },
        fail: function fail(res) {
          my.alert({
            title: '亲',
            content: '导航出错',
            buttonText: '我知道了',
            success: function success() {
              my.alert({
                title: '用户点击了「我知道了」'
              });
            }
          });
        }
      }));
    },

    /**
     * 导航方式切换
     * @method onSearchType
     * @param {*} e
     */
    onSearchType: function onSearchType(e) {
      var searchTypeData = this.data.searchTypeData;
      var index = e.currentTarget.dataset.index;

      for (var i = 0; i < searchTypeData.length; i++) {
        searchTypeData[i].isCheck = 0;

        if (searchTypeData[i].id === index) {
          searchTypeData[i].isCheck = 1;
        }
      }

      this.setData({
        searchTypeData: searchTypeData
      });
    },

    /**
     * 关闭下方card
     * @method onCloseCard
     */
    onCloseCard: function onCloseCard() {
      this.mapCtx.clearRoute();
      this.setData({
        cardData: {},
        bottomCardShow: false,
        polyline: [],
        scale: this.data.scale,
        chooseData: [],
        routeShow: [],
        MenuShow: true
      }); // this.getAttractions();
    },
    //  展示路线
    showRoute: function showRoute(value) {
      var point = [];
      var marks = [];
      var _this$props2 = this.props,
          polylineColor = _this$props2.polylineColor,
          polylineWidth = _this$props2.polylineWidth,
          polylineDottedLine = _this$props2.polylineDottedLine,
          anchorY = _this$props2.anchorY,
          anchorX = _this$props2.anchorX,
          alpha = _this$props2.alpha,
          width = _this$props2.width,
          height = _this$props2.height;

      for (var i = 0; i < value.items.length; i++) {
        point.push({
          latitude: value.items[i].latitude,
          longitude: value.items[i].longitude
        });
        marks.push({
          id: value.items[i].id,
          latitude: value.items[i].latitude,
          longitude: value.items[i].longitude,
          tag: value.items[i].tag,
          title: value.items[i].title,
          address: value.items[i].address,
          detail: value.items[i].detail,
          anchorY: anchorY,
          anchorX: anchorX,
          alpha: alpha,
          width: width,
          height: height,
          iconPath: value.items[i].icon2
        });
      }

      this.setData({
        markers: marks,
        // includePoints: point,
        polyline: [{
          points: point,
          color: polylineColor,
          width: polylineWidth,
          dottedLine: polylineDottedLine,
          zIndex: 5
        }]
      }, function () {// console.log(this.data.polyline, point, marks, '支付宝版本4')
      });
    },
    //  选择线路
    chooseRoute: function chooseRoute(e) {
      console.log('选择线路');
      this.mapCtx.clearRoute();
      var data = this.props.data;
      var id = e.target.dataset.value.id;

      for (var i = 0; i < data.length; i++) {
        data[i].isChoose = 0;

        if (data[i].id === id) {
          data[i].isChoose = 1; //  设置 高亮 steps 地图上的路线

          this.setData({
            chooseData: this.data.routeShow[i]
          });
          this.showRoute(data[i]);
        }
      }

      this.setData({
        routeShow: data
      });
    },
    // 退出线路推荐
    backout: function backout() {
      var data = this.props.data;
      var that = this;
      my.confirm({
        title: '亲确定要退出线路推荐吗',
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        success: function success(result) {
          if (result.confirm) {
            that.setData({
              showRouteBox: false,
              boxHeightChange: false,
              cardData: {},
              polyline: [],
              MenuShow: true,
              chooseData: [],
              routeShow: []
            }, function () {
              that.getAttractions();
            });
          }
        }
      });
    },
    // 点击展开
    showMore: function showMore(e) {
      this.setData({
        boxHeightChange: !this.data.boxHeightChange
      });
    },
    // 点击线路名称 弹card
    tapName: function tapName(value) {
      this.setData({
        showRouteBox: false,
        cardShow: value.detail === 1,
        cardData: {
          longitude: value.longitude,
          latitude: value.latitude,
          title: value.title,
          tag: value.tag,
          address: value.address,
          detail: value.detail
        }
      });
    },
    // 点击三角形
    moveToUp: function moveToUp() {
      // 用that取代this，防止不必要的情况发生
      var that = this; // 创建一个动画实例

      var animation = my.createAnimation({
        // 动画持续时间
        duration: 500,
        // 定义动画效果，当前是匀速
        timingFunction: 'linear'
      }); // 将该变量赋值给当前动画

      that.animation = animation; // 先在y轴偏移，然后用step()完成一个动画

      animation.translateY(-350).step(); // 用setData改变当前动画

      that.setData({
        // 通过export()方法导出数据
        animationData: animation["export"]()
      });
      that.setData({
        ToUp: false
      });
    },
    moveToDown: function moveToDown() {
      // 用that取代this，防止不必要的情况发生
      var that = this; // 创建一个动画实例

      var animation = my.createAnimation({
        // 动画持续时间
        duration: 500,
        // 定义动画效果，当前是匀速
        timingFunction: 'linear'
      }); // 将该变量赋值给当前动画

      that.animation = animation; // 先在y轴偏移，然后用step()完成一个动画

      animation.translateY(0).step(); // 用setData改变当前动画

      that.setData({
        // 通过export()方法导出数据
        animationData: animation["export"]()
      });
      that.setData({
        ToUp: true
      });
    },
    moveTolocation: function moveTolocation() {
      this.setData({
        bgchange: false
      });
      this.mapCtx.moveToLocation();
    },
    onRegionChange: function onRegionChange() {
      this.setData({
        bgchange: true
      });
    },
    // 计算距离是否最近
    getMindis: function getMindis(alldata) {
      var that = this;
      my.getLocation({
        success: function success(res) {
          var disarry = [];
          var mindis = 0;

          for (var m = 0; m < alldata.length; m++) {
            var value = alldata[m].items;

            for (var i = 0; i < value.length; i++) {
              var dis = getGreatCircleDistance(res.latitude, res.longitude, value[i].latitude, value[i].longitude);
              disarry.push(dis);
            }

            var min = disarry[0];

            for (var _i = 0; _i < disarry.length; _i++) {
              var cur = disarry[_i];

              if (cur < min) {
                min = cur;
                mindis = _i;
              }
            }

            for (var _i2 = 0; _i2 < alldata[m].items.length; _i2++) {
              that.props.data[m].items[_i2].isFar = 0;

              if (value[mindis].id === alldata[m].items[_i2].id) {
                that.props.data[m].items[_i2].isFar = 1;
                that.setData({
                  routeShow: that.props.data
                });
              }
            }

            disarry = [];
          }
        },
        fail: function fail() {
          my.alert({
            title: '定位失败'
          });
        }
      });
    },
    getlocation: function getlocation() {
      my.confirm({
        title: '温馨提示',
        content: '请求获取你的当前位置',
        confirmButtonText: '获取',
        cancelButtonText: '取消',
        success: function success(result) {
          my.getLocation({
            success: function success(res) {
              my.hideLoading();
              my.alert({
                title: '定位成功'
              });
            },
            fail: function fail() {
              my.hideLoading();
              my.alert({
                title: '定位失败'
              });
            }
          });
        }
      });
    },
    onShowRouterPopover: function onShowRouterPopover() {
      this.setData({
        ClassShow: false,
        CityShow: false,
        MenuShow: false
      });
      var data = this.props.data;

      for (var i = 0; i < data.length; i++) {
        //  清tabbar
        data[i].isChoose = 0;
      }

      data[0].isChoose = 1; //  tabbar第一项高亮

      this.showRoute(data[0]); //  默认显示第一条线路

      this.setData({
        showRouteBox: true,
        chooseData: data[0],
        routeShow: data
      });
    },
    onShowCityPopover: function onShowCityPopover() {
      this.setData({
        CityShow: true,
        ClassShow: false
      });
    },
    onShowClassPopover: function onShowClassPopover() {
      this.setData({
        ClassShow: true,
        CityShow: false
      });
    },
    onGetVoice: function onGetVoice() {
      my.alert({
        title: '你点击了语言讲解'
      });
    }
  }
}); // ===============================计算距离方法========================================

var EARTH_RADIUS = 6378137.0;
var PI = Math.PI;

function getRad(d) {
  return d * PI / 180.0;
}
/**
 * caculate the great circle distance
 * @param {Object} lat1
 * @param {Object} lng1
 * @param {Object} lat2
 * @param {Object} lng2
 */


function getGreatCircleDistance(lat1, lng1, lat2, lng2) {
  var radLat1 = getRad(lat1);
  var radLat2 = getRad(lat2);
  var a = radLat1 - radLat2;
  var b = getRad(lng1) - getRad(lng2);
  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));
  s *= EARTH_RADIUS;
  s = Math.round(s * 10000) / 10000.0;
  return s;
}