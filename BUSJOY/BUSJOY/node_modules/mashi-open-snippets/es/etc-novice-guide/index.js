/* eslint-disable */
Component({
  data: {
    goOn: false,
    currentIndex: 0,
    currentItem: {}
  },
  props: {
    data: [],

    /**
     * 返回 step 切换的状态
     */
    onClickStep: function onClickStep() {},

    /**
     * 点击底部文案
     */
    onClickBottomText: function onClickBottomText() {},

    /**
     * 进行下一步前需要确认
     */
    onConfirm: function onConfirm() {},
    containerClassName: ''
  },
  didMount: function didMount() {
    var _this = this;

    var data = this.props.data;

    if (!Array.isArray(data) || data.length <= 0) {
      return;
    }

    this.setData({
      currentItem: data[0]
    }, function () {
      _this.playAudio(_this.data.currentItem.audio, 3000);
    });
  },
  didUpdate: function didUpdate() {},
  methods: {
    /**
     * 播放音频
     */
    playAudio: function playAudio(audioSrc, millisecond) {
      var _this2 = this;

      if (millisecond === void 0) {
        millisecond = 3000;
      }

      clearTimeout(this.backMusicTimeout);

      if (!audioSrc) {
        return;
      }

      if (!this.innerAudioContext) {
        this.innerAudioContext = my.createInnerAudioContext();
      } else {
        this.innerAudioContext.stop();
      }

      this.innerAudioContext.src = audioSrc;
      this.innerAudioContext.autoplay = false;
      this.innerAudioContext.loop = false;
      this.innerAudioContext.play();
      this.innerAudioContext.onEnded(function () {
        _this2.innerAudioContext.src = '';
        _this2.backMusicTimeout = setTimeout(function () {
          _this2.innerAudioContext.src = _this2.data.currentItem.audio;

          _this2.innerAudioContext.play();
        }, millisecond);
      });
    },

    /**
     * 点击上一步
     */
    onTapPre: function onTapPre() {
      var _this3 = this;

      var currentIndex = this.data.currentIndex;
      var tem = currentIndex;
      var _this$props = this.props,
          data = _this$props.data,
          onClickStep = _this$props.onClickStep;

      if (currentIndex === 0) {
        return;
      }

      currentIndex--;
      this.setData({
        currentIndex: currentIndex,
        currentItem: data[currentIndex]
      }, function () {
        // 切换音频
        _this3.playAudio(_this3.data.currentItem.audio, 3000);
      });
      onClickStep({
        fromStep: tem,
        toStep: currentIndex
      });
    },

    /**
     * 点击下一步
     */
    onTapNext: function onTapNext() {
      var _this$data = this.data,
          currentIndex = _this$data.currentIndex,
          currentItem = _this$data.currentItem;
      var tem = currentIndex;
      var onConfirm = this.props.onConfirm;

      if (currentItem.confirmation) {
        onConfirm({
          index: tem,
          msg: '该步需要组件外确认，确认后调用组件的 next 方法'
        });
        return;
      }

      this.next('内部调用');
    },

    /**
     * 真正切换到下一步
     */
    next: function next(type) {
      var _this4 = this;

      var _this$data2 = this.data,
          currentIndex = _this$data2.currentIndex,
          currentItem = _this$data2.currentItem;
      var tem = currentIndex;
      var _this$props2 = this.props,
          data = _this$props2.data,
          onClickStep = _this$props2.onClickStep; // 如果方法是外界调用且不需要外界确认则调用无效

      if (type !== '内部调用' && !currentItem.confirmation) {
        return;
      } // 是否是最后一页


      var isLastPage = currentIndex === data.length - 1;

      if (!isLastPage) {
        currentIndex++;
        this.setData({
          currentIndex: currentIndex,
          currentItem: data[currentIndex]
        }, function () {
          // 切换音频
          _this4.playAudio(_this4.data.currentItem.audio, 3000);
        });
      } // 如果已经是最后一页，则 toStep 返回为 null


      onClickStep({
        fromStep: tem,
        toStep: isLastPage ? null : currentIndex
      });
    },

    /**
     * 点击底部的链接
     * @param event 
     */
    onBottomText: function onBottomText(event) {
      var target = event.target;
      var onClickBottomText = this.props.onClickBottomText;
      onClickBottomText(target.dataset);
    }
  }
});