var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import { watchPhoneShake, callPhoneVibrate, toast } from './utils';

Component({
  data: {
    rollIndex: 0,
    rollSize: 4,
    isRolling: false
  },
  props: {
    clickMode: false, // 默认摇一摇触发，可以修改为点击模式
    width: 318, // rollImg 宽度
    height: 300, // rollImg 单个元素高度
    background: '#FFF',
    rollTime: 3000, // ms
    initImg: 'https://gw.alicdn.com/tfs/TB1JsqGbHPpK1RjSZFFXXa5PpXa-289-298.png',
    awardImg: '',
    rollImg: 'https://gw.alipayobjects.com/zos/rmsportal/cuSVBODjFpqiVMgnLiXK.png',
    onStart: function onStart() {}, // 开始的回调
    onFinish: function onFinish() {} // 结束的回调
  },
  didMount: function didMount() {
    var _this = this;

    this.ctx = my.createCanvasContext('canvas');
    var _props = this.props,
        rollTime = _props.rollTime,
        initImg = _props.initImg,
        clickMode = _props.clickMode;

    this.drawImage(initImg);
    if (!clickMode) {
      watchPhoneShake(function () {
        _this.run();
        setTimeout(function () {
          _this.stop();
        }, rollTime);
      });
    }
  },

  methods: {
    onStart: function onStart() {
      var _this2 = this;

      if (this.data.isRolling) return;

      var _props2 = this.props,
          onStart = _props2.onStart,
          clickMode = _props2.clickMode,
          rollTime = _props2.rollTime;

      if (onStart) {
        onStart();
      }
      if (clickMode) {
        this.run();
        setTimeout(function () {
          _this2.stop();
        }, rollTime);
      } else {
        watchPhoneShake(function () {
          _this2.run();
          setTimeout(function () {
            _this2.stop();
          }, rollTime);
        });
      }
    },
    run: function run() {
      this.setData({
        isRolling: true
      });
      this.interval = setInterval(this.draw.bind(this), 17);
    },
    stop: function stop() {
      var _this3 = this;

      clearInterval(this.interval);
      setTimeout(function () {
        _this3.drawImage(_this3.props.awardImg);
        _this3.setData({
          isRolling: false
        });
        if (_typeof(_this3.props.onFinish)) {
          _this3.props.onFinish();
        }
      }, 17);
    },
    drawImage: function drawImage(img) {
      if (!img) return;

      var _props3 = this.props,
          width = _props3.width,
          height = _props3.height,
          rollImg = _props3.rollImg,
          background = _props3.background;
      var _data = this.data,
          rollIndex = _data.rollIndex,
          rollSize = _data.rollSize;

      var ctx = this.ctx;
      ctx.setFillStyle(background);
      ctx.fillRect(0, 0, width, height);
      ctx.drawImage(img, 0, 0, width, height, 0, 0, width, height);
      ctx.draw();
    },
    draw: function draw() {
      var _props4 = this.props,
          width = _props4.width,
          height = _props4.height,
          rollImg = _props4.rollImg,
          background = _props4.background;
      var _data2 = this.data,
          rollIndex = _data2.rollIndex,
          rollSize = _data2.rollSize;

      var ctx = this.ctx;
      ctx.setFillStyle(background);
      ctx.fillRect(0, 0, width, height);
      ctx.drawImage(rollImg, 0, height * rollIndex, width, height, 0, 0, width, height);
      ctx.draw();
      this.setData({
        rollIndex: rollIndex >= rollSize ? 0 : rollIndex + 1
      });
    }
  }
});